/**
 * @file Firebase Security Rules for Sina Estate Manager.
 *
 * Core Philosophy:
 * This ruleset implements a dynamic Role-Based Access Control (RBAC).
 * Access is default-denied and then selectively granted based on the permissions
 * assigned to a user's role. A user's role is stored in /users/{userId}.
 * The permissions for each role are stored in /roles/{roleId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS

    /**
     * @description Checks if a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Gets the user's role ID from their profile document.
     */
    function getUserRoleId(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.roleId;
    }

    /**
     * @description Gets the list of permissions for a given role ID.
     */
    function getRolePermissions(roleId) {
      return get(/databases/$(database)/documents/roles/$(roleId)).data.permissions;
    }

    /**
     * @description Checks if the currently signed-in user has a specific permission.
     * Caches role and permissions data per request.
     */
    function hasPermission(permission) {
      if (!isSignedIn()) {
        return false;
      }
      let roleId = getUserRoleId(request.auth.uid);
      if (roleId == null) {
        return false;
      }
      // The 'super_admin' role has all permissions implicitly.
      if (roleId == 'super_admin') {
          return true;
      }
      let permissions = getRolePermissions(roleId);
      return permission in permissions;
    }

    /**
     * @description Checks if the user has any of the specified read permissions.
     */
    function canRead(resourceName) {
        return hasPermission('view_' + resourceName) || hasPermission('manage_' + resourceName);
    }
    
    /**
     * @description Checks if the user has the specific write/manage permission.
     */
    function canWrite(resourceName) {
        return hasPermission('manage_' + resourceName);
    }

    // DEFAULT-DENY ALL
    match /{document=**} {
      allow read, write: if false;
    }

    // RULE DEFINITIONS
    
    /**
     * @description Users Collection
     * - A user can read their own profile.
     * - Users with 'manage_users' permission can read/list/write other users.
     */
    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || hasPermission('manage_users'));
      allow list, update, delete: if hasPermission('manage_users');
      // A user can create their own document on signup or be created by an admin.
      allow create: if isSignedIn() && (request.auth.uid == userId || hasPermission('manage_users'));
    }
    
    /**
     * @description Roles Collection
     * - Only users with 'manage_users' permission can read and write roles.
     */
    match /roles/{roleId} {
        allow read, write: if hasPermission('manage_users');
    }

    /**
     * @description General Data Collections
     * - Access is determined by dynamic permissions for each resource.
     */
    match /villas/{villaId} {
      allow read: if canRead('villas');
      allow write: if canWrite('villas');
    }
    match /personnel/{personnelId} {
      allow read: if canRead('personnel');
      allow write: if canWrite('personnel');
    }
    match /stakeholders/{stakeholderId} {
      allow read: if canRead('stakeholders');
      allow write: if canWrite('stakeholders');
    }
    match /documents/{documentId} {
      allow read: if canRead('documents');
      allow write: if canWrite('documents');
    }
    match /estates/{estateId} {
      allow read: if canRead('settings');
      allow write: if canWrite('settings');
    }
    match /attendances/{attendanceId} {
      allow read: if canRead('attendance');
      allow write: if canWrite('attendance');
    }

    /**
     * @description Financial & Payroll Collections
     * - Access is determined by dynamic permissions.
     */
    match /financial_transactions/{transactionId} {
      allow read: if canRead('finance');
      allow write: if canWrite('finance');
    }
    match /payrolls/{payrollId} {
      allow read: if canRead('payroll');
      allow write: if canWrite('payroll');
    }
    match /payroll_settings/{settingId} {
      allow read: if canRead('settings');
      allow write: if canWrite('settings');
    }
    
    /**
     * @description Integration Settings Collection
     * - ONLY Super Admins have access (hardcoded as a safeguard).
     */
    match /integration_settings/{settingId} {
      allow read, write: if getUserRoleId(request.auth.uid) == 'super_admin';
    }
  }
}

    