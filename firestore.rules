/**
 * @file Firebase Security Rules for Sina Estate Manager.
 *
 * Core Philosophy:
 * This ruleset implements Role-Based Access Control (RBAC).
 * Access is default-denied and then selectively granted based on the user's role,
 * which is stored in the /users/{userId} document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS

    /**
     * @description Checks if a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Gets the user's role from their profile document in the 'users' collection.
     * Caches the result per request.
     */
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    /**
     * @description Checks if the signed-in user has the 'super_admin' role.
     */
    function isSuperAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'super_admin';
    }

    /**
     * @description Checks if the signed-in user has the 'admin' role.
     */
    function isAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'admin';
    }
    
    /**
     * @description Checks if the signed-in user has the 'financial_expert' role.
     */
    function isFinancialExpert() {
        return isSignedIn() && getRole(request.auth.uid) == 'financial_expert';
    }


    // DEFAULT-DENY ALL
    match /{document=**} {
      allow read, write: if false;
    }

    // RULE DEFINITIONS
    
    /**
     * @description Users Collection
     * - Any signed-in user can read their own profile.
     * - Only Super Admins can create, update, or delete user profiles.
     */
    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isSuperAdmin());
      allow list: if isSuperAdmin();
      allow update: if isSuperAdmin() || (request.auth.uid == userId && request.resource.data.keys().hasOnly(['displayName']));
      allow delete: if isSuperAdmin();
      // A user can create their own document on signup
      allow create: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description General Collections (Villas, Personnel, Stakeholders, etc.)
     * - Super Admins and Admins have full read/write access.
     */
    match /villas/{villaId} {
      allow read, write: if isSuperAdmin() || isAdmin();
    }
    match /personnel/{personnelId} {
      allow read, write: if isSuperAdmin() || isAdmin();
    }
    match /stakeholders/{stakeholderId} {
      allow read, write: if isSuperAdmin() || isAdmin();
    }
    match /documents/{documentId} {
      allow read, write: if isSuperAdmin() || isAdmin();
    }
    match /estates/{estateId} {
      allow read, write: if isSuperAdmin() || isAdmin();
    }
    match /attendances/{attendanceId} {
      allow read, write: if isSuperAdmin() || isAdmin();
    }

    /**
     * @description Financial & Payroll Collections
     * - Super Admins, Admins, and Financial Experts have read/write access.
     */
    match /financial_transactions/{transactionId} {
      allow read, write: if isSuperAdmin() || isAdmin() || isFinancialExpert();
    }
    match /payrolls/{payrollId} {
      allow read, write: if isSuperAdmin() || isAdmin() || isFinancialExpert();
    }
    match /payroll_settings/{settingId} {
      allow read, write: if isSuperAdmin() || isAdmin();
    }
    
    /**
     * @description Integration Settings Collection
     * - ONLY Super Admins have read/write access.
     */
    match /integration_settings/{settingId} {
      allow read, write: if isSuperAdmin();
    }
  }
}
